// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rema1000.Data;

namespace Rema1000.Migrations
{
    [DbContext(typeof(DbContextRema1000))]
    partial class DbContextRema1000ModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Rema1000.Models.Address", b =>
                {
                    b.Property<Guid>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SupplierID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Zipcode")
                        .HasColumnType("int");

                    b.HasKey("AddressID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Rema1000.Models.ContactPerson", b =>
                {
                    b.Property<Guid>("ContectPersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactSelfPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SupplierID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SupplierMainline")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContectPersonID");

                    b.HasIndex("SupplierID");

                    b.ToTable("ContactPeople");
                });

            modelBuilder.Entity("Rema1000.Models.Department", b =>
                {
                    b.Property<Guid>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Rema1000.Models.MeassurementUnit", b =>
                {
                    b.Property<Guid>("MeassurementUnitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MeassurementUnitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeassurementUnitID");

                    b.ToTable("MeassurementUnits");
                });

            modelBuilder.Entity("Rema1000.Models.Product", b =>
                {
                    b.Property<Guid>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MeassurementUnitID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MeassurementUnitValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductCategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Productname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SalesPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("SupplierID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnitsInStock")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.HasIndex("MeassurementUnitID");

                    b.HasIndex("ProductCategoryID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Rema1000.Models.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductCategoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductDepartmentDepartmentID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductCategoryID");

                    b.HasIndex("ProductDepartmentDepartmentID");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Rema1000.Models.Supplier", b =>
                {
                    b.Property<Guid>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SupplierNamer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Rema1000.Models.Address", b =>
                {
                    b.HasOne("Rema1000.Models.Supplier", "Supplier")
                        .WithMany("SupplierAddress")
                        .HasForeignKey("SupplierID");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Rema1000.Models.ContactPerson", b =>
                {
                    b.HasOne("Rema1000.Models.Supplier", "Supplier")
                        .WithMany("SupplierContactPerson")
                        .HasForeignKey("SupplierID");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Rema1000.Models.Product", b =>
                {
                    b.HasOne("Rema1000.Models.MeassurementUnit", "MeassurementUnit")
                        .WithMany()
                        .HasForeignKey("MeassurementUnitID");

                    b.HasOne("Rema1000.Models.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryID");

                    b.HasOne("Rema1000.Models.Supplier", "Supplier")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("SupplierID");

                    b.Navigation("MeassurementUnit");

                    b.Navigation("ProductCategory");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Rema1000.Models.ProductCategory", b =>
                {
                    b.HasOne("Rema1000.Models.Department", "ProductDepartment")
                        .WithMany()
                        .HasForeignKey("ProductDepartmentDepartmentID");

                    b.Navigation("ProductDepartment");
                });

            modelBuilder.Entity("Rema1000.Models.Supplier", b =>
                {
                    b.Navigation("SupplierAddress");

                    b.Navigation("SupplierContactPerson");

                    b.Navigation("SupplierProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
